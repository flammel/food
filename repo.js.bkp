export type Quantity = number;
export type Unit = "ml" | "g";
export type FoodId = number;
export type LogItemId = number;

export function isUnit(value: string): value is Unit {
    return value === "g" || value === "ml";
}

export interface Food {
    readonly id: FoodId;
    readonly brand: string;
    readonly name: string;
    readonly quantity: Quantity;
    readonly unit: Unit;
    readonly calories: number;
    readonly fat: number;
    readonly carbs: number;
    readonly protein: number;
    readonly next?: Food;
}

export interface Recipe extends Food {}

export interface LogItem {
    readonly id: LogItemId;
    readonly date: Date;
    readonly food: Food;
    readonly quantity: Quantity;
}

class Repository {
    public getFoods(): Food[] {
        const items: Food[] = JSON.parse(window.localStorage.getItem("foods")) || [];
        return items.filter((i) => !i.next);
    }

    public saveFood(newFoodData: Food, oldFood?: Food) {
        const id = Math.floor(Math.random() * 1000000);
        const newFood = {...newFoodData, id};
        window.localStorage.setItem(
            "foods",
            JSON.stringify([
                ...this.getFoods().map((i) => (oldFood && i.id === oldFood.id ? { ...i, next: newFood.id } : i)),
                newFood,
            ]),
        );
    }

    public getLog(): LogItem[] {
        return [];
    }
}

const repository = new Repository();
export default repository;
